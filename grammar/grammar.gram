;   The presence of a prefix is indicated with a single leading ASCII
;   colon character (':', 0x3b), which MUST be the first character of the
;   message itself.  There MUST be NO gap (whitespace) between the colon
;   and the prefix.  The prefix is used by servers to indicate the true
;   origin of the message.  If the prefix is missing from the message, it
;   is assumed to have originated from the connection from which it was
;   received from.  Clients SHOULD NOT use a prefix when sending a
;   message; if they use one, the only valid prefix is the registered
;   nickname associated with the client.



; we will change that depending on if it's better to get no command or to fail, ot to get bad command
valid_commands_int 			=   "ADMIN" / "AWAY" / "DIE" / "INVITE" / "JOIN" / "KICK" / "KILL" / "LIST" / "MODE" / "MOTD" / "NAMES" / "NICK" / "NOTICE" / "OPER" / "PART" / "PASS" / "PING" / "PRIVMSG" / "QUIT" / "TIME" / "TOPIC" / "USER" / "VERSION" / "WHO"
ONLY_VALUE!valid_commands 	=  valid_commands_int

ignored_commands 			=   "CAP" / "CNOTICE" / "CPRIVMSG" / "CONNECT" / "ENCAP" / "ERROR" / "HELP" / "INFO" / "ISON" / "KNOCK" / "LINKS" / "LUSERS" / "NAMESX" / "PONG" / "REHASH" / "RULES" / "SERVER" / "SERVICE" / "SERVLIST" / "SQUERY" / "SQUIT" / "SETNAME" / "SILENCE" / "STATS" / "SUMMON" / "TRACE" / "UHNAMES" / "USERHOST" / "USERIP" / "USERS" / "WALLOPS" / "WATCH" / "WHOIS" / "WHOWAS"



OCTET 						= 0x00-FF
            ; 8 bits of data
message_int 				= * OCTET
ONLY_VALUE!message 			= message_int

start    					=    [ ":" prefix SPACE ] any_command [ params ] [ ":" message ] crlf
;message    				=    [ ":" prefix SPACE ] command [ params ] crlf
prefix     					=    servername / ( nickname [ [ "!" user ] "@" host ] )
any_command    				=    valid_commands / ignored_commands
params     					=    *14 ( SPACE middle ) [ SPACE ":" trailing ] / 14 ( SPACE middle ) [ SPACE [ ":" ] trailing ]

nospcrlfcl 					=    0x01-09 / 0x0B-0C / 0x0E-1F / 0x21-39 / 0x3B-FF
            ; any octet except NUL, CR, LF, " " and ":"

middle     					=    nospcrlfcl * ( ":" / nospcrlfcl )
trailing   					=    * ( ":" / " " / nospcrlfcl )

SPACE      					=    0x20        
			; space character
crlf       					=    0x0D 0x0A   
			; "carriage return" "linefeed"



;   NOTES:
;      1) After extracting the parameter list, all parameters are equal
;         whether matched by <middle> or <trailing>. <trailing> is just a
;         syntactic trick to allow SPACE within the parameter.
;
;      2) The NUL (0x00) character is not special in message framing, and
;         basically could end up inside a parameter, but it would cause
;         extra complexities in normal C string handling. Therefore, NUL
;         is not allowed within messages.
;
;   Most protocol messages specify additional semantics and syntax for
;   the extracted parameter strings dictated by their position in the
;   list.  For example, many server commands will assume that the first
;   parameter after the command is the list of targets, which can be
;   described with:

target     					=    nickname / server
msgtarget  					=    msgto * ( "," msgto )
msgto      					=    channel / ( user [ "%" host ] "@" servername ) / ( user "%" host ) / targetmask / nickname / ( nickname "!" user "@" host )
channel    					=    ( "#" / "+" / ( "!" channelid ) / "&" ) chanstring [ ":" chanstring ]
servername 					=    hostname
host       					=    hostname / hostaddr
hostname   					=    shortname * ( "." shortname )
shortname  					=    ( letter / digit ) * ( letter / digit / "-" ) * ( letter / digit )
            ; as specified in RFC 1123 [HNAME]

hostaddr   					=    ip4addr / ip6addr
ip4addr    					=    1*3 digit "." 1*3 digit "." 1*3 digit "." 1*3 digit
ip6addr    					=    1* hexdigit 7 ( ":" 1* hexdigit ) / "0:0:0:0:0:" ( "0" / "FFFF" ) ":" ip4addr
nickname   					=    ( letter / special ) *8 ( letter / digit / special / "-" )
targetmask 					=    ( "$" / "#" ) mask
            ; see details on allowed masks in section 3.3.1

chanstring 					=    0x01-07 / 0x08-09 / 0x0B-0C / 0x0E-1F / 0x21-2B / 0x2D-39 / 0x3B-FF
            ; any octet except NUL, BELL, CR, LF, " ", "," and ":"

channelid  					=   5 ( 0x41-5A / digit )
		   	; 5 ( A-Z / 0-9 )




user       					=    1* ( 0x01-09 / 0x0B-0C / 0x0E-1F / 0x21-3F / 0x41-FF )
        	; any octet except NUL, CR, LF, " " and "@"
key        					=    1*23 ( 0x01-05 / 0x07-08 / 0x0C / 0x0E-1F / 0x21-7F )
           	; any 7-bit US_ASCII character,
            ; except NUL, CR, LF, FF, h/v TABs, and " "
letter     					=    0x41-5A / 0x61-7A
     		; A-Z / a-z
digit      					=    0x30-39
            ; 0-9
hexdigit   					=    digit / "A" / "B" / "C" / "D" / "E" / "F"
special    					=    0x5B-60 / 0x7B-7D
            ; "[", "]", "\", "`", "_", "^", "{", "|", "}"
